// Generated by Xata Codegen 0.23.5. Please do not edit.
import {buildClient} from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "offer",
    columns: [
      {name: "name", type: "string", unique: true},
      {name: "category", type: "string", defaultValue: "otros"},
      {name: "image", type: "string"},
      {name: "price", type: "float", notNull: true, defaultValue: "00.00"},
      {name: "description", type: "multiple"},
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Offer = InferredTypes["offer"];
export type OfferRecord = Offer & XataRecord;

export type DatabaseSchema = {
  offer: OfferRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Daniel-Caluff-s-workspace-6q6mfc.us-east-1.xata.sh/db/black-out",
  enableBrowser: true,
  apiKey: process.env.XATA_API_KEY+""
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({...defaultOptions, ...options}, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
